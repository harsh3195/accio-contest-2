// * Use environment variables to perform read/write to result files
// * process.env.TEST_FILE_NAME is the name of THIS file (the unit tests you're writing - use it as compile command)
// * process.env.USER_CODE_DIR is the directory path of user's code. Use it to import/run user specific code
// * process.env.PUBLIC_PORT is the publicly accessible port on localhost for user's server. Use it to perform HTTP requests to user server
// * process.env.IO_TEST_OUTPUT_FILE is the name of the file where results of IO tests should be put
// * process.env.UNIT_TEST_OUTPUT_FILE is the name of the file where results of UNIT tests should be put
// * The results file should have a JSON array with ONLY "true" or "false" values (booleans) as elements having one-to-one correspondance to challenges you design

const { exec } = require('child_process')
const fs = require('fs')

const stdin = `
3
28 
48 19 83 8 85 83 74 93 20 80 27 9 19 42 12 47 49 51 13 44 47 21 31 80 84 7 5 93 
116 107 119 33 108 113 114 100 77 99 50 32 122 78 14 66 56 80 56 130 119 23 63 100 126 18 54 129 
6 
1 3 0 5 8 5 
2 4 6 7 9 9 
8 
75250 50074 43659 8931 11273 27545 50879 77924 
112960 114515 81825 93424 54316 35533 73383 160252 
`.trim()

const expectedOutput = `
15 22 11 18 8
1 2 4 5
6 7 1
`
	.trim()
	.split('\n')

const java = exec(`cd ${process.env.USER_CODE_DIR} && javac NMeetings.java && java NMeetings`)
java.stdin.write(stdin + '\n')

let _realOutput = ''

java.stdout.on('data', (data) => {
	_realOutput += data.toString()
})

java.stdout.on('close', () => {
	const results = []
	const realOutput = _realOutput.trim().split('\n')

	for (let i = 0; i < expectedOutput.length; i++) {
		const expectedRow = expectedOutput[i]
		const actualRow = realOutput[i]
		results.push(expectedRow.trim() === actualRow.trim())
	}

	fs.writeFileSync(process.env.UNIT_TEST_OUTPUT_FILE, JSON.stringify(results))
	process.exit(0)
})